// Generated by gencpp from file serial/wheelPulse.msg
// DO NOT EDIT!


#ifndef SERIAL_MESSAGE_WHEELPULSE_H
#define SERIAL_MESSAGE_WHEELPULSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial
{
template <class ContainerAllocator>
struct wheelPulse_
{
  typedef wheelPulse_<ContainerAllocator> Type;

  wheelPulse_()
    : wheelPulse1(0)
    , wheelPulse2(0)
    , wheelPulse3(0)
    , wheelPulse4(0)  {
    }
  wheelPulse_(const ContainerAllocator& _alloc)
    : wheelPulse1(0)
    , wheelPulse2(0)
    , wheelPulse3(0)
    , wheelPulse4(0)  {
  (void)_alloc;
    }



   typedef int32_t _wheelPulse1_type;
  _wheelPulse1_type wheelPulse1;

   typedef int32_t _wheelPulse2_type;
  _wheelPulse2_type wheelPulse2;

   typedef int32_t _wheelPulse3_type;
  _wheelPulse3_type wheelPulse3;

   typedef int32_t _wheelPulse4_type;
  _wheelPulse4_type wheelPulse4;





  typedef boost::shared_ptr< ::serial::wheelPulse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial::wheelPulse_<ContainerAllocator> const> ConstPtr;

}; // struct wheelPulse_

typedef ::serial::wheelPulse_<std::allocator<void> > wheelPulse;

typedef boost::shared_ptr< ::serial::wheelPulse > wheelPulsePtr;
typedef boost::shared_ptr< ::serial::wheelPulse const> wheelPulseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial::wheelPulse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial::wheelPulse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace serial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'serial': ['/home/ubuntu/zky_robot/src/serial/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::serial::wheelPulse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::wheelPulse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::wheelPulse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::wheelPulse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::wheelPulse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::wheelPulse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial::wheelPulse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24a44dd68705966da4e5bad889e38810";
  }

  static const char* value(const ::serial::wheelPulse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24a44dd68705966dULL;
  static const uint64_t static_value2 = 0xa4e5bad889e38810ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial::wheelPulse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial/wheelPulse";
  }

  static const char* value(const ::serial::wheelPulse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial::wheelPulse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 wheelPulse1\n\
int32 wheelPulse2\n\
int32 wheelPulse3\n\
int32 wheelPulse4\n\
\n\
";
  }

  static const char* value(const ::serial::wheelPulse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial::wheelPulse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheelPulse1);
      stream.next(m.wheelPulse2);
      stream.next(m.wheelPulse3);
      stream.next(m.wheelPulse4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheelPulse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial::wheelPulse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial::wheelPulse_<ContainerAllocator>& v)
  {
    s << indent << "wheelPulse1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheelPulse1);
    s << indent << "wheelPulse2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheelPulse2);
    s << indent << "wheelPulse3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheelPulse3);
    s << indent << "wheelPulse4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.wheelPulse4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_MESSAGE_WHEELPULSE_H
